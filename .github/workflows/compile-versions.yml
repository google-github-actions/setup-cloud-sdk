name: 'Compile versions'

on:
  pull_request:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  PR_BRANCH: 'actions/gcloud-versions'

jobs:
  compile-versions:
    runs-on: 'ubuntu-latest'

    steps:
    - uses: 'actions/checkout@v3'
      with:
        ref: 'main'

    - name: 'Get versions list'
      run: |-
        mkdir -p ./data
        echo "{}" > ./data/versions.json # TODO

        echo "Computed versions:"
        cat ./data/versions.json

    - id: 'updates'
      name: 'Update versions list'
      run: |-
        if git diff --exit-code ./data/versions.json; then
          echo "No changes"
          exit 0
        fi

        echo "had_changes=true" >> ${GITHUB_OUTPUT}

        git config user.name "google-github-actions-bot"
        git config user.email "github-actions-bot@google.com"

        git checkout -b "${{ env.PR_BRANCH }}"
        git add ./data/versions.json
        git commit -m "Update gcloud versions ($(date --iso-8601=h))"
        git push -f origin "${{ env.PR_BRANCH }}"

    - name: 'Create Pull Request'
      if: steps.updates.outputs.had_changes == 'true'
      uses: 'actions/github-script@v6'
      with:
        github-token: '${{ secrets.ACTIONS_BOT_TOKEN }}'
        script: |-
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const baseRef = `${{ github.base_ref }}`;
          const prBranch = `${{ env.PR_BRANCH }}`;
          const prBody = `Update latest gcloud versions`;

          console.log({
            owner,
            repo,
            baseRef,
            prBranch,
            prBody,
          });

          const listResponse = await github.rest.pulls.list({
            owner: owner,
            repo: repo,
            state: `open`,
            head: `${owner}:${prBranch}`,
            base: baseRef,
          });

          console.log({listResponse});

          if(!listResponse.data.length) {
            core.info(`Attempting to create new PR...`)
            const createResponse = await github.rest.pulls.create({
              owner: owner,
              repo: repo,
              title: `Update gcloud versions`,
              body: prBody,
              head: prBranch,
              base: baseRef,
            });
            core.info(`Created PR #${createResponse.data.number} at ${createResponse.data.html_url}`);
          } else {
            const instance = listResponse.data[0];
            core.info(`Attempting to update existing PR #${instance.number}...`)
            const updateResponse = await github.rest.pulls.update({
              owner: owner,
              repo: repo,
              pull_number: instance.number,
              title: `Update gcloud versions`,
              body: prBody,
            });
            core.info(`Updated PR #${updateResponse.data.number} at ${updateResponse.data.html_url}`);
          }
